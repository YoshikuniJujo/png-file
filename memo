2013.04.11 Thu.

data PNGParams = PNGParams {
	pngWidth :: Int,
	pngHeight :: Int,
	pngColorDepth :: Int,
	pngHasAlpha :: Bool,
	pngHasColor :: Bool,
	pngHasPallet :: Bool
 }

後々の拡張のため、PNGParams は公開しない。
setPNGWidth ... と pngWidth ... とを公開することにする。
つまり、setter と getter だ。

class PNGImage pi where
	type PNGColor pi
	type PNGColors pi
	bsToPNGImage :: PNGParams -> Lazy.ByteString -> pi
	pngImageToBs :: pi -> Lazy.ByteString
	setPixel :: Int -> Int -> pi -> pi
	getPixel :: Int -> Int -> pi -> PNGColor pi
	colorsToPNGImage :: PNGParams -> PNGColors pi -> pi
	pngImageToColors :: pi -> PNGColors

2013.04.12 Fri.

とりあえず、読み込み、書き込みの際の CRC の自動チェック、自動変換はできるようにした。
しかし、ChunkBody が二重化されてしまっているのがあまり美しくないな

上記は一応解決した。ただ、fromBinary と toBinary を同時に行っているところがあるけど。
まあ、そこはとりあえずはいいとする。

で、どんなふうにするかを昨日考えたわけだが、
読み込んだ PNG data から変換していくこととした。

最終的な形としては、

PNGParams { width, height, etc, Maybe pallet, Maybe etc } というものを作る。
また、class PNGImage を作りいくつかの method を追加する。
IDAT より先に来る chunk の内容は PNGParams にまとめることとして、
それ以外の Chunk は正式なものはそれぞれのスロットに入れ、
そうでないものは others にまとめて ByteString の形で入れておこうかな。
ここらへんを、もっと柔軟に、たとえば String も使えるようにする、
とかもいいかもしれない。

class Field pi => PNGImage pi where
	type PNGColor pi
	setPixel :: pi -> Int -> Int -> PNGColor pi -> pi
	getPixel :: pi -> Int -> Int -> PNGColor pi
	constructPNGImage :: pi -> PNGColor pi -> pi

こんな感じかな。
で、ByteString と [] を使った data をこれの instance としておこう。

2013.04.13 Sat.

Other chunk はその field に name が必要だ。

2013.04.14 Sun.

名前とデータ構造を結びつける必要がある。
[("IHDR", ChunkIHDR), ("gAMA", ChunkGAMA) ... ] 等が必要だ。
逆もできなければならないわけだがそれはすこし難しいかな。
もしかすると、T_IHDR 等は無駄かもしれない。
何となくきれいな感じがするのだけど、
別に String または ByteString で型を決めたっていいわけだし ...

T_IHDR 等は使えるかもしれない。
T_IHDR -> ChunkIHDR 等を自動生成してしまえば良いのでは。
そうすれば、あとは
[(T_IHDR, "IHDR"), (T_GAMA, "gAMA") ... ] を作っておけば良い。
chunkMaker T_IHDR ... のように使えるだろう。

T_IHDR -> ChunkIHDR の自動生成は上手くいかない。
つまり、各コンストラクターの型が違うということだ。
コード生成を使うしかないのだろうか。

2013.04.15 Mon.

自動生成等はうまくいった。
そしてコードの重複はかなり消せたが、コードはぐちゃぐちゃになった。
refactoring が必要だ。
それぞれの module の in と out についてちゃんと考える必要がある。
まずは今のままの名前で働きをきちんと特定して、
そのあとで適切な名前を与えよう。

File.Binary.PNG.RW を refactoring 中だ。
この module は何をするべきか。
上に対しては、Binary <-> [Chunk] をするべきだろう。
今のところはそこらへんがちゃんとしてない。
上に対して PNG(..) を公開するべきではないだろう。
typeChunk や TypeChunk は公開していいだろう。
これらはつまり Chunk を上手く扱うための構造なのだから。
needs, beforeIDATs, beforePLTEs, anyplaces は名前を変えよう。
これらはいずれかの形で必要にはなる。

createChunk と chunkData は上に公開するべきではないだろう。
IHDR, PLTE, IDAT, IEND 等はどう考えるべきか。
これらはおそらく必要になるだろう。

さて、細かい話は上のようになるだろうが、もっと大きい話のメモをしておこう。
つまり、Binary と [Chunk] の相互変換をする module が必要だ。
それが現在のところ File.Binary.PNG.RW あたりでやっていることだ。
そして真の意味での Chunks module は、IHDR 等を公開する。
これは別に import したほうが良さそうだ。
data Chunk はそれらの chunk 達をひとつにまとめるためだけにあるということを意識
しておく必要がある。

とりあえず Binary と [Chunk] の相互変換の部分だけ作るべきだろう。

今、RW.hs としているものを Chunks.hs とする。

2013.04.17 Wed.

fromBinary (n, "SOME") = fmap (first ChunkSOME) . fromBinary n
fromBinary (n, typ) = fmap (first (Others typ)) . fromBinary n

toBinary (n, _) (ChunkSOME dat) = toBinary n dat
toBinary (n, _) (Others _ dat) = toBinary n dat

上記の構造を作るのだが、できるだけ一般的な関数を作って、それを使いたい。

mkFromBinary で Others を特別扱いしないためにはどうすれば良いか。
mkToBinary で Others を特別扱いしないためには引数の数が多かったらそこを wildP
にするという実装でいいだろう。

2013.04.18 Thu.

nameToType "SOME" = T_SOME
nameToType typ = T_Others typ

typeToName T_SOME = "SOME"
typeToName (T_Others typ) = typ

refactoring がとりあえずおわり、ようやく本来の部分に取りかかることができる。
data PNG pi = PNG PNGHeader pi PNGValues
とし、
class PNGImage pi where
	.
	.
	.
とし、
PNGImage pi => ... PNG pi ... といった関数を作る。
これは、File.Binary.PNG.Data あたりで作ろうかな。

zipper 的な作りにすることを考える。
up :: pi -> pi
down :: pi -> pi
left :: pi -> pi
right :: pi -> pi
goto :: Int -> Int -> pi -> pi
とか、
set :: pi -> color -> pi
get :: pi -> color
とか。
そして、データそのものを [[Color]] で表現するものと、ByteString で表現するもの
との両方を作ってみる。
前者は変換作業をまとめてする形式となり、後者はその都度行う形となる。
よって、後者は PNGHeader を内蔵する形となるはずだ。
とすると、前者でも内蔵する形としなければならない。

データに大きな影響を与えるパラメータとして、以下が挙げられるだろう。
width
height
depth
alpha
color
palet
compressionType は現在は一種類のみなので気にしない
filterType これは、作られた Image を [Chunk] に変換する時に気にすればいい
interlaceType これも同上だろう

IHDR もわたすようにすれば BKGD の読み込みはより良くなるが、
そこまでするべきかどうか。
他の値でそういうものが無ければ今のところは [Word8] として読んでおいて、
後から解釈するようにしよう。
TRNS もそうだな。
試してみてもいいかもしれない。

今のところ PNImage は file の編集にのみ対応している。

file の読み込みについては、もっと順次アクセスを意識するべきだろう。
とくに interlace について考える必要がある。
また filter についても読み込みのときには意識する必要があるので難しい。
[[Color]] 形式のときにはすべて展開してしまうことにする。
これは編集に向く形式である。
ByteString 形式のときには Image への入出力のときにいろいろな計算をするようにしよう。
filter が問題かもしれないが、これは goUp 等の時に基準となる pixel を持っていけば
できそうだ。

setPixel は grey -> color, palet -> not palet, not alpha -> alpha の変換は
自動で行うことにする。逆の変換は明示的に行う必要があるだろう。

filter は [[Color]] 形式のときには一気にやってしまえばいい。
ByteString 形式のときには左、上、左上の pixel を自動で計算するようにしよう。

とりあえず test 目的で viewer を作ってみるか。
viewer の速度を改善したいけど、それは後でやろう。
ひとつは buffering かな。
1pixel ごとに IO を行うのは効率的ではない。
でもそれだけじゃない遅延がある気がする。
ひとつは Word8 -> Int の変換の問題もあるかもしれない。
いずれにしても後にしよう。

IHDR と PLTE を渡しちゃえば良さそうだな。
他のパラメータは表示に関するもので、編集には関係ない気がするのだ。
もちろん重ね合わせには影響してくるだろうけど。
いや、透過の情報は必要か。
やはり新しい PNGHeader が必要かもしれない。

2013.04.20 Sat.
今のところ、cHRM, gAMA, iCCP, sRGB を理解していない。
gAMA についてはだいたいわかった。
だいたいわかったかな。
iCCP の具体的な形式はよくわからない。
また、sRGB についても完全に理解したわけではない。

いずれにしても PNGHeader には必要なさそうだ。

PNGHeader に必要な情報は、
IHDR のすべての情報、tRNS の情報だ。
bKGD が微妙ではあるが、これは別の情報とすることができるだろう。

それ以外の情報としては、cHRM, gAMA, iCCP, sBIT, sRGB, bKGD, hIST, pHYs, sPLT,
iTXt, tEXt, zTXt, tIME があるが、これらは後で追加すればいいだろう。

pngUseColor, pngUsePalet と pngTrans はまとめてしまおうかな。
pngColorType としようかな。
pngDepth も、まとめたほうがいいかもしれない。

color type は
000
010
011
100
110
の5通り。
00
01
01
10
11

palet であれば他の値は 0 1 であることが決まる。
それ以外はすべての組み合わせがある。
Index { trans :: [Int] } | Grey { trans :: Maybe Int } | GreyAlpha |
Color { trans :: Maybe (Int, Int, Int) } | ColorAlpha

bit depth はそのままでいいかな。

2013.04.22 Mon.

PNGImageL は [[(Int, Int, Int, Int)]] を利用し、
toPalet, toGrey, fromAlpha は ByteString への変換時に暗黙のうちに行うようにする。
そして、class の member 関数としてのそれらは、error として、
これらが自動で行われるという message を返すことにする。
toInterlace と fromInterlace は自動で判断できないので、情報として持つ必要がある。
toPalet, toGrey, fromAlpha は PNGImageBS では必要となるように思ったが、
これも結局のところは fromPNGImage のときに自動でやればいいので必要ないかもしれない。
逆の変換は image の編集の際に必要に応じて行うことになるだろう。
